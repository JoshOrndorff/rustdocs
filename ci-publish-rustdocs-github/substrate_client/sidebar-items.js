initSidebarItems({"enum":[["BlockStatus","Block status."],["ExecutionStrategy","Strategy for executing a call into the runtime."],["NeverOffchainExt","An implementation of offchain extensions that should never be triggered."]],"fn":[["new_in_mem","Create an instance of in-memory client."],["new_with_backend","Create a client with the explicitly provided backend. This is useful for testing backend implementations."]],"mod":[["backend","Substrate Client data backend"],["block_builder","Utility struct to build a block."],["blockchain","Substrate blockchain trait"],["children","Functionality for reading and storing children hashes from db."],["cht","Canonical hash trie definitions and helper functions."],["error","Substrate client possible errors."],["genesis","Tool for creating the genesis block."],["in_mem","In memory client backend"],["leaves","Helper for managing the set of available leaves in the chain for DB implementations."],["light","Light client components."],["runtime_api","All the functionality required for declaring and implementing runtime apis."]],"struct":[["BlockImportNotification","Summary of an imported block"],["Client","Substrate Client"],["ClientInfo","Client info"],["ExecutionStrategies","Execution strategies settings."],["LocalCallExecutor","Call executor that executes methods locally, querying all required data from local backend."],["LongestChain","Implement Longest Chain Select implementation where 'longest' is defined as the highest number of blocks"],["StorageChangeSet","Storage change set"]],"trait":[["BlockBody","Fetch block body by ID."],["BlockchainEvents","A source of blockchain events."],["CallExecutor","Method call executor."]],"type":[["FinalityNotifications","A stream of block finality notifications."],["ImportNotifications","Type that implements `futures::Stream` of block import events."],["StorageEventStream","Type that implements `futures::Stream` of storage change events."]]});
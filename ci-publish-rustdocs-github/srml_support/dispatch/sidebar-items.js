initSidebarItems({"enum":[["DecodeDifferent","A type that decodes to a different type than it encodes. The user needs to make sure that both types use the same encoding."],["Never","A type that cannot be instantiated."],["TransactionWeight","Default type used as the weight representative in a `#[weight = x]` attribute."]],"mod":[["fmt","Utilities for formatting and printing `String`s."],["result","Error handling with the `Result` type."]],"struct":[["FunctionArgumentMetadata","All the metadata about a function argument."],["FunctionMetadata","All the metadata about a function."],["Vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'."]],"trait":[["Callable","Serializable version of Dispatchable. This value can be used as a \"function\" in an extrinsic."],["Clone","A common trait for the ability to explicitly duplicate an object."],["Codec","Trait that allows zero-copy read/write of value-references to/from slices in LE format."],["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Dispatchable","A lazy call (module function and argument values) that can be executed via its `dispatch` method."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format. Implementations should override `using_encoded` for value types and `encode_to` for allocating types."],["EncodeAsRef","Something that can be encoded as a reference."],["Eq","Trait for equality comparisons which are equivalence relations."],["HasCompact","Trait that tells you if a given type can be encoded/decoded in a compact way."],["Input","Trait that allows reading of data into a slice."],["IsSubType",""],["Output","Trait that allows writing of data."],["Parameter",""],["PartialEq","Trait for equality comparisons which are partial equivalence relations."],["Weighable","A `Call` enum (aka transaction) that can be weighted using the custom weight attribute of its dispatchable functions. Is implemented by default in the `decl_module!`."]],"type":[["CallableCallFor",""],["DecodeDifferentArray",""],["Result","Result of a module function call; either nothing (functions are only called for \"side effects\") or an error message."],["Weight","The final type that each `#[weight = $x:expr]`'s expression must evaluate to."]]});
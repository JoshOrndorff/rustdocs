initSidebarItems({"enum":[["BlockId","Something to identify a block."],["ExecutionContext","Context for executing a call into the runtime."],["InitializeBlock","Before calling any runtime api function, the runtime need to be initialized at the requested block. However, some functions like `execute_block` or `initialize_block` itself don't require to have the runtime initialized at the requested block."],["NativeOrEncoded","Something that is either a native or an encoded value."],["TransactionValidity","Information on a transaction's validity and, if valid, on how it relates to other transactions."]],"macro":[["create_apis_vec","Create a vector of Api declarations."]],"mod":[["mem","Basic functions for dealing with memory."],["offchain","Offchain workers types"],["slice","A dynamically-sized view into a contiguous sequence, `[T]`."]],"struct":[["ApiRef","Auxiliary wrapper that holds an api instance and binds it to the given lifetime."],["OverlayedChanges","The overlayed changes to state to be queried on top of the backend."],["RuntimeVersion","Runtime version. This should not be thought of as classic Semver (major/minor/tiny). This triplet have different semantics and mis-interpretation could cause problems. In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`, absolutely not `impl_version` since they change the semantics of the runtime."]],"trait":[["ApiExt","An extension for the `RuntimeApi`."],["BlockT","Something which fulfills the abstract idea of a Substrate block. It has types for an `Extrinsic` piece of information as well as a `Header`."],["CallRuntimeAt","Something that can call into the runtime at a given block."],["ConstructRuntimeApi","Something that can be constructed to a runtime api."],["Core","The `Core` api trait that is mandatory for each runtime."],["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format. Implementations should override `using_encoded` for value types and `encode_to` for allocating types."],["GetNodeBlockType","A marker trait for something that knows the type of the node block."],["GetRuntimeBlockType","A marker trait for something that knows the type of the runtime block."],["HashT","Abstraction around hashing"],["HeaderT","Something which fulfills the abstract idea of a Substrate header. It has types for a `Number`, a `Hash` and a `Digest`. It provides access to an `extrinsics_root`, `state_root` and `parent_hash`, as well as a `digest` and a block `number`."],["Metadata","The `Metadata` api trait that returns metadata for the runtime."],["RuntimeApiInfo","Something that provides information about a runtime api."],["TaggedTransactionQueue","The `TaggedTransactionQueue` api trait for interfering with the new transaction queue."]],"type":[["ApiId","The identity of a particular API interface that the runtime might provide."],["ApisVec","A vector of pairs of `ApiId` and a `u32` for version. For `\"std\"` builds, this is a `Cow`."],["ProofRecorder","A type that records all accessed trie nodes and generates a proof out of it."]]});
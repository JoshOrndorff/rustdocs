initSidebarItems({"enum":[["ExecutionError","Externalities Error."],["ExecutionManager","Like `ExecutionStrategy` only it also stores a handler in case of consensus failure."],["ExecutionStrategy","Strategy for executing a call into the runtime."],["NeverOffchainExt","An implementation of offchain extensions that should never be triggered."]],"fn":[["always_wasm","Evaluate to ExecutionManager::NativeWhenPossible, without having to figure out the type."],["create_proof_check_backend","Create proof check backend."],["create_proof_check_backend_storage","Create in-memory storage of proof check backend."],["execution_proof_check","Check execution proof, generated by `prove_execution` call."],["execution_proof_check_on_trie_backend","Check execution proof on proving backend, generated by `prove_execution` call."],["key_changes","Return changes of given key at given blocks range. `max` is the number of best known block. Changes are returned in descending order (i.e. last block comes first)."],["key_changes_proof","Returns proof of changes of given key at given blocks range. `max` is the number of best known block."],["key_changes_proof_check","Check key changes proog and return changes of the key at given blocks range. `max` is the number of best known block. Changes are returned in descending order (i.e. last block comes first)."],["native_else_wasm","Evaluate to ExecutionManager::NativeElseWasm, without having to figure out the type."],["native_when_possible","Evaluate to ExecutionManager::NativeWhenPossible, without having to figure out the type."],["new","Creates new substrate state machine."],["oldest_non_pruned_changes_trie","Get number of oldest block for which changes trie is not pruned given changes trie configuration, pruning parameter and number of best finalized block."],["prove_child_read","Generate child storage read proof."],["prove_child_read_on_trie_backend","Generate storage read proof on pre-created trie backend."],["prove_execution","Prove execution using the given state backend, overlayed changes, and call executor."],["prove_execution_on_trie_backend","Prove execution using the given trie backend, overlayed changes, and call executor. Produces a state-backend-specific \"transaction\" which can be used to apply the changes to the backing store, such as the disk. Execution proof is the set of all 'touched' storage DBValues from the backend."],["prove_read","Generate storage read proof."],["prove_read_on_trie_backend","Generate storage read proof on pre-created trie backend."],["prune_changes_tries","Prune obsolete changes tries. Pruning happens at the same block, where highest level digest is created. Pruning guarantees to save changes tries for last `min_blocks_to_keep` blocks. We only prune changes tries at `max_digest_interval` ranges. Returns MemoryDB that contains all deleted changes tries nodes."],["read_child_proof_check","Check child storage read proof, generated by `prove_child_read` call."],["read_child_proof_check_on_proving_backend","Check child storage read proof on pre-created proving backend."],["read_proof_check","Check storage read proof, generated by `prove_read` call."],["read_proof_check_on_proving_backend","Check storage read proof on pre-created proving backend."]],"mod":[["backend","State machine backends. These manage the code and storage of contracts."]],"struct":[["BasicExternalities","Simple HashMap-based Externalities impl."],["ChangesTrieAnchorBlockId","Block identifier that could be used to determine fork of this block."],["ChildStorageKey","A wrapper around a child storage key."],["Ext","Wraps a read-only backend, call executor, and current overlayed changes."],["InMemoryChangesTrieStorage","In-memory implementation of changes trie storage."],["OverlayedChanges","The overlayed changes to state to be queried on top of the backend."],["ProofRecorder","Records trie nodes as they pass it."],["ProvingBackend","Patricia trie-based backend which also tracks all touched storage trie values. These can be sent to remote node and used as a proof of execution."],["StateMachine","The substrate state machine."],["TestExternalities","Simple HashMap-based Externalities impl."],["TrieBackend","Patricia trie-based backend. Transaction type is an overlay of changes to commit."]],"trait":[["ChangesTrieRootsStorage","Changes trie storage. Provides access to trie roots and trie nodes."],["ChangesTrieStorage","Changes trie storage. Provides access to trie roots and trie nodes."],["CodeExecutor","Code execution engine."],["Error","State Machine Error bound."],["Externalities","Externalities: pinned to specific active address."],["Storage","Patricia trie-based storage trait."],["TrieBackendStorage","Key-value pairs storage that is used by trie backend essence."],["TrieMut","A key-value datastore implemented as a database-backed modified Merkle tree."]],"type":[["DBValue",""],["MemoryDB","As in `memory_db::MemoryDB` that uses prefixed storage key scheme."],["TrieDBMut","Persistent trie database write-access interface for the a given hasher."]]});
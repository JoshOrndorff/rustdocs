initSidebarItems({"enum":[["Void","The void type - it cannot exist."]],"fn":[["print","Print a printable value."]],"macro":[["assert_eq_uvec","Panic when the vectors are different, without taking the order into account."],["assert_err",""],["assert_noop",""],["assert_ok",""],["construct_runtime","Construct a runtime, with the given name and the given modules."],["decl_event","Implement the `Event` for a module."],["decl_module","Declare a module struct and implement the dispatch logic."],["decl_storage","Declares strongly-typed wrappers around codec-compatible types in storage."],["ensure",""],["fail",""],["for_each_tuple","Programatically create derivations for tuples of up to 19 elements. You provide a second macro which is called once per tuple size, along with a number of identifiers, one for each element of the tuple."],["impl_outer_dispatch","Implement a meta-dispatch module to dispatch to other dispatchers."],["impl_outer_event","Constructs an Event type for a runtime. This is usually called automatically by the construct_runtime macro. See also __create_decl_macro."],["impl_outer_inherent","Implement the outer inherent. All given modules need to implement `ProvideInherent`."],["impl_outer_origin","Constructs an Origin type for a runtime. This is usually called automatically by the construct_runtime macro. See also __create_decl_macro."],["impl_runtime_metadata","Implements the metadata support for the given runtime and all its modules."],["storage_items","Declares strongly-typed wrappers around codec-compatible types in storage."]],"mod":[["dispatch","Dispatch system. Contains a macro for defining runtime modules and generating values representing lazy module function calls."],["event","Macros that define an Event types. Events can be used to easily report changes or conditions in your runtime to external entities like users, chain explorers, or dApps."],["inherent",""],["metadata",""],["storage","Stuff to do with the runtime's storage."],["traits","Traits for SRML"]],"trait":[["Hashable","Trait for available hash functions."],["StorageDoubleMapWithHasher","An implementation of a map with a two keys."]]});
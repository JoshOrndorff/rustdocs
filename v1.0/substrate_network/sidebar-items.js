initSidebarItems({"enum":[["NetworkMsg","Messages to be handled by NetworkService."],["NetworkStatePeerEndpoint",""],["NodeKeyConfig","The configuration of a node's secret key, describing the type of key and how it is obtained. A node's identity keypair is the result of the evaluation of the node key configuration."],["PublicKey","The public key of a node's identity keypair."],["Secret","The configuration options for obtaining a secret key `K`."],["Severity","The severity of misbehaviour of a peer that is reported."],["SyncState","Reported sync state."]],"macro":[["build_multiaddr","Easy way for a user to create a `Multiaddr`."],["construct_simple_protocol","Construct a simple protocol that is composed of several sub protocols. Each \"sub protocol\" needs to implement `Specialization` and needs to provide a `new()` function. For more fine grained implementations, this macro is not usable."]],"mod":[["config","Configuration for the networking layer of Substrate."],["consensus_gossip","Utility for gossip of network messages between authorities. Handles chain-specific and standard BFT messages."],["error","Substrate service possible errors."],["identity","A node's network identity keys."],["message","Network packet message types. These get serialized and put into the lower level protocol payload."],["specialization","Specializations of the substrate network protocol to allow more complex forms of communication."],["test",""]],"struct":[["Multiaddr","Representation of a Multiaddr."],["NetworkState","Returns general information about the networking."],["NetworkStateNotConnectedPeer",""],["NetworkStatePeer",""],["OnDemand","On-demand requests service. Dispatches requests to appropriate peers."],["PeerId","Identifier of a peer of the network."],["PeerInfo","Info about a peer's known state."],["ProtocolId","Name of a protocol, transmitted on the wire. Should be unique for each chain."],["ProtocolStatus","Syncing status and statistics"],["RemoteResponse","On-demand remote call response."],["Service","Substrate network service. Handles network IO and manages connectivity."],["SyncStatus","Syncing status and statistics"]],"trait":[["ClientHandle","Local client abstraction for the network."],["Context","Context for a network-specific handler."],["ExHashT","Minimum Requirements for a Hash within Networking"],["ManageNetwork","Trait for managing network"],["OnDemandService","On-demand service API."],["SyncProvider","Sync status"],["TransactionPool","Transaction pool interface"]],"type":[["Ed25519Secret","The options for obtaining a Ed25519 secret key."],["FetchFuture","Type that represents fetch completion future."],["Secp256k1Secret","The options for obtaining a Secp256k1 secret key."]]});
initSidebarItems({"enum":[["Error","Error concerning the Parity-Codec based decoder."]],"fn":[["child_delta_trie_root","Determine a child trie root given a hash DB and delta values. H is the default hasher, but a generic implementation may ignore this type parameter and use other hashers."],["child_trie_root","Determine a child trie root given its ordered contents, closed form. H is the default hasher, but a generic implementation may ignore this type parameter and use other hashers."],["default_child_trie_root","Determine the default child trie root."],["delta_trie_root","Determine a trie root given a hash DB and delta values."],["for_keys_in_child_trie","Call `f` for all keys in a child trie."],["is_child_trie_key_valid","Determine whether a child trie key is valid."],["ordered_trie_root","A trie root formed from the items, with keys attached according to their compact-encoded index (using `parity-codec` crate)."],["prefixed_key","Make database key from hash and prefix."],["read_child_trie_value","Read a value from the child trie."],["read_child_trie_value_with","Read a value from the child trie with given query."],["read_trie_value","Read a value from the trie."],["read_trie_value_with","Read a value from the trie with given Query."],["record_all_keys","Record all keys for a given root."],["trie_root","Determine a trie root given its ordered contents, closed form."],["unhashed_trie","Determine a trie root node's data given its ordered contents, closed form."]],"struct":[["NodeCodec","Concrete implementation of a `NodeCodec` with Parity Codec encoding, generic over the `Hasher`"],["Recorder","Records trie nodes as they pass it."],["TrieStream","Codec-flavored TrieStream"]],"trait":[["AsHashDB","As in `hash_db`, but less generic, trait exposed."],["KeyFunction",""],["Query","Description of what kind of query will be made to the trie."],["Trie","A key-value datastore implemented as a database-backed modified Merkle tree."],["TrieMut","A key-value datastore implemented as a database-backed modified Merkle tree."]],"type":[["DBValue",""],["GenericMemoryDB","As in `memory_db`, but less generic, trait exposed."],["HashDB","As in `hash_db`, but less generic, trait exposed."],["Lookup","Querying interface, as in `trie_db` but less generic."],["MemoryDB","As in `memory_db::MemoryDB` that uses prefixed storage key scheme."],["PlainDB","As in `hash_db`, but less generic, trait exposed."],["PrefixedMemoryDB","As in `memory_db::MemoryDB` that uses prefixed storage key scheme."],["TrieDB","Persistent trie database read-access interface for the a given hasher."],["TrieDBMut","Persistent trie database write-access interface for the a given hasher."],["TrieError","As in `trie_db`, but less generic, error type for the crate."]]});
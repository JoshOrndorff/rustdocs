initSidebarItems({"enum":[["Call","Contracts module."],["RawEvent","Events for this module."]],"macro":[["convert_args",""],["define_func",""],["gen_signature",""],["gen_signature_dispatch",""],["match_tokens","A simple utility macro that helps to match against a list of tokens."],["register_func",""],["unmarshall_then_body_then_marshall",""]],"struct":[["AccountCounter","The subtrie counter"],["AccountInfo","Information for managing an acocunt and its sub trie abstraction. This is the required info to cache for an account"],["AccountInfoOf","The code associated with a given account."],["CodeHashOf","The code associated with a given account."],["CodeStorage","A mapping between an original code hash and instrumented wasm code, ready for the execution."],["Config","In-memory cache of configuration values."],["DefaultDispatchFeeComputor","The default dispatch fee computor computes the fee in the same way that implementation of `MakePayment` for balances module does."],["GenesisConfig",""],["Module",""],["PristineCode","A mapping from an original code hash to the original code, untouched by instrumentation."],["Schedule","Definition of the cost schedule and other parameterizations for wasm vm."],["SimpleAddressDeterminator","Simple contract address determintator."],["TrieIdFromParentCounter","Get trie id from `account_id`"]],"trait":[["ComputeDispatchFee","A function that returns the fee for dispatching a `Call`."],["ContractAddressFor","A function that generates an `AccountId` for a contract upon instantiation."],["Trait",""],["TrieIdGenerator","Get a trie id (trie id must be unique and collision resistant depending upon its context) Note that it is different than encode because trie id should have collision resistance property (being a proper uniqueid)."]],"type":[["BalanceOf",""],["CodeHash",""],["Event","[`RawEvent`] specialized for the configuration [`Trait`]"],["NegativeImbalanceOf",""],["TrieId",""]]});
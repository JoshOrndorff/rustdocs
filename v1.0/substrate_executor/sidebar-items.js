initSidebarItems({"fn":[["with_native_environment","Set up the externalities and safe calling environment to execute calls to a native runtime."]],"macro":[["convert_args",""],["gen_signature",""],["impl_function_executor",""],["marshall",""],["native_executor_instance",""],["unmarshall_args",""]],"mod":[["error","Rust executor possible errors."]],"struct":[["NativeExecutor","A generic `CodeExecutor` implementation that uses a delegate to determine wasm code equivalence and dispatch to native code when possible, falling back on `WasmExecutor` when not."],["NativeVersion",""],["RuntimeVersion","Runtime version. This should not be thought of as classic Semver (major/minor/tiny). This triplet have different semantics and mis-interpretation could cause problems. In particular: bug fixes should result in an increment of `spec_version` and possibly `authoring_version`, absolutely not `impl_version` since they change the semantics of the runtime."],["WasmExecutor","Wasm rust executor for contracts."]],"trait":[["Codec","Trait that allows zero-copy read/write of value-references to/from slices in LE format."],["Externalities","Externalities: pinned to specific active address."],["NativeExecutionDispatch","Delegate for dispatching a CodeExecutor call to native code."],["RuntimeInfo","Provides runtime information."]]});
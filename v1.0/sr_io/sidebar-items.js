initSidebarItems({"enum":[["EcdsaVerifyError",""]],"fn":[["blake2_128","Do a Blake2 128-bit hash and return result."],["blake2_256","Do a Blake2 256-bit hash and return result."],["chain_id","The current relay chain identifier."],["child_storage","Get `key` from child storage and return a `Vec`, empty if there's a problem."],["child_storage_root","\"Commit\" all existing operations and compute the resultant child storage root."],["clear_child_storage","Clear the storage of a key."],["clear_prefix","Clear the storage entries with a key that starts with the given prefix."],["clear_storage","Clear the storage of a key."],["ed25519_verify","Verify a ed25519 signature."],["enumerated_trie_root","A trie root formed from the enumerated items."],["exists_child_storage","Check whether a given `key` exists in storage."],["exists_storage","Check whether a given `key` exists in storage."],["keccak_256",""],["kill_child_storage","Clear an entire child storage."],["ordered_trie_root","A trie root formed from the enumerated items."],["print","Print a printable value."],["read_child_storage","Get `key` from child storage, placing the value into `value_out` (as much of it as possible) and return the number of bytes that the entry in storage had beyond the offset or None if the storage entry doesn't exist at all. Note that if the buffer is smaller than the storage entry length, the returned number of bytes is not equal to the number of bytes written to the `value_out`."],["read_storage","Get `key` from storage, placing the value into `value_out` (as much of it as possible) and return the number of bytes that the entry in storage had beyond the offset or None if the storage entry doesn't exist at all. Note that if the buffer is smaller than the storage entry length, the returned number of bytes is not equal to the number of bytes written to the `value_out`."],["secp256k1_ecdsa_recover","Verify and recover a SECP256k1 ECDSA signature. - `sig` is passed in RSV format. V should be either 0/1 or 27/28. - returns `Err` if the signature is bad, otherwise the 64-byte pubkey (doesn't include the 0x04 prefix)."],["set_child_storage","Set the child storage of a key to some value."],["set_storage","Set the storage of a key to some value."],["sr25519_verify","Verify an sr25519 signature."],["storage","Get `key` from storage and return a `Vec`, empty if there's a problem."],["storage_changes_root","\"Commit\" all existing operations and get the resultant storage change root."],["storage_root","\"Commit\" all existing operations and compute the resultant storage root."],["submit_extrinsic","Submit extrinsic."],["trie_root","A trie root formed from the iterated items."],["twox_128","Do a XX 128-bit hash and return result."],["twox_256","Do a XX 256-bit hash and return result."],["twox_64","Do a XX 64-bit hash and return result."],["with_externalities","Execute the given closure with global function available whose functionality routes into the externalities `ext`. Forwards the value that the closure returns."],["with_storage","Execute the given closure with global functions available whose functionality routes into externalities that draw from and populate `storage`. Forwards the value that the closure returns."]],"mod":[["ed25519","Simple Ed25519 API."],["sr25519","Simple sr25519 (Schnorr-Ristretto) API."]],"struct":[["BasicExternalities","Simple HashMap-based Externalities impl."],["Blake2Hasher","Concrete implementation of Hasher using Blake2b 256-bit hashes"],["ChildStorageKey","A wrapper around a child storage key."],["TestExternalities","Simple HashMap-based Externalities impl."]],"trait":[["Externalities","Externalities: pinned to specific active address."],["Pair","Trait suitable for typical cryptographic PKI key pair type."],["Printable","Trait for things which can be printed."]],"type":[["ChildrenStorageOverlay","A set of key value pairs for children storage;"],["StorageOverlay","A set of key value pairs for storage."]]});
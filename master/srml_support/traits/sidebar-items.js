initSidebarItems({"enum":[["ExistenceRequirement","Simple boolean for whether an account needs to be kept in existence."],["SignedImbalance","Either a positive or a negative imbalance."],["UpdateBalanceOutcome","Outcome of a balance update."],["WithdrawReason","Reason for moving funds out of an account."]],"struct":[["WithdrawReasons","Reasons for moving funds out of an account."]],"trait":[["Contains","A trait for querying whether a type can be said to statically \"contain\" a value. Similar in nature to `Get`, except it is designed to be lazy rather than active (you can't ask it to enumerate all values that it contains) and work for multiple values rather than just one."],["Currency","Abstraction over a fungible assets system."],["Get","A trait for querying a single fixed value from a type."],["Imbalance","A trait for a not-quite Linear Type that tracks an imbalance."],["LockableCurrency","A currency whose accounts can have liquidity restrictions."],["MakePayment","Simple trait designed for hooking into a transaction payment."],["OnDilution","Trait for a hook to get called when some balance has been minted, causing dilution."],["OnFreeBalanceZero","The account with the given id was killed."],["OnUnbalanced","Handler for when some currency \"account\" decreased in balance for some reason."],["ReservableCurrency","A currency where funds can be reserved from the user."]],"type":[["LockIdentifier","An identifier for a lock. Used for disambiguating different locks so that they can be individually replaced or removed."]]});
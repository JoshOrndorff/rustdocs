initSidebarItems({"derive":[["Decode",""],["Encode",""]],"enum":[["DecodeDifferent","A type that decodes to a different type than it encodes. The user needs to make sure that both types use the same encoding."],["Never","A type that cannot be instantiated."]],"macro":[["Clone","Derive macro generating an impl of the trait `Clone`."],["Eq","Derive macro generating an impl of the trait `Eq`."],["PartialEq","Derive macro generating an impl of the trait `PartialEq`."]],"mod":[["fmt","Utilities for formatting and printing `String`s."],["marker","Primitive traits and types representing basic properties of types."],["result","Error handling with the `Result` type."]],"struct":[["DefaultByteGetter","Wrapper over dyn pointer for accessing a cached once byte value."],["DispatchError","Reason why a dispatch call failed"],["ErrorMetadata","All the metadata about a module error."],["FunctionArgumentMetadata","All the metadata about a function argument."],["FunctionMetadata","All the metadata about a function."],["ModuleConstantMetadata","All the metadata about one module constant."],["Vec","A contiguous growable array type, written `Vec<T>` but pronounced 'vector'."]],"trait":[["Callable","Serializable version of Dispatchable. This value can be used as a \"function\" in an extrinsic."],["Clone","A common trait for the ability to explicitly duplicate an object."],["Codec","Trait that allows zero-copy read/write of value-references to/from slices in LE format."],["Decode","Trait that allows zero-copy read of value-references from slices in LE format."],["DefaultByte","A technical trait to store lazy initiated vec value as static dyn pointer."],["Dispatchable","A lazy call (module function and argument values) that can be executed via its `dispatch` method."],["Encode","Trait that allows zero-copy write of value-references to slices in LE format."],["EncodeAsRef","Something that can be encoded as a reference."],["EncodeLike","A marker trait that tells the compiler that a type encode to the same representation as another  type."],["Eq","Trait for equality comparisons which are equivalence relations."],["HasCompact","Trait that tells you if a given type can be encoded/decoded in a compact way."],["Input","Trait that allows reading of data into a slice."],["IsSubType",""],["ModuleDispatchError","An error that is returned by a dispatchable function of a module."],["ModuleErrorMetadata","All the metadata about errors in a module."],["Output","Trait that allows writing of data."],["Parameter",""],["PartialEq","Trait for equality comparisons which are partial equivalence relations."]],"type":[["CallableCallFor",""],["DecodeDifferentArray",""],["DispatchResult","Result of a module function call; either nothing (functions are only called for \"side effects\") or an error message."],["Result","Result with string error message. This exists for backward compatibility purpose."],["TransactionPriority","Priority for a transaction. Additive. Higher is better."]]});
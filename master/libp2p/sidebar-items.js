initSidebarItems({"enum":[["TransportError","An error during [dialing][Transport::dial] or [listening][Transport::listen_on] on a [`Transport`]."]],"fn":[["build_development_transport","Builds a `Transport` that supports the most commonly-used protocols that libp2p supports."],["build_tcp_ws_secio_mplex_yamux","Builds an implementation of `Transport` that is suitable for usage with the `Swarm`."]],"macro":[["build_multiaddr","Easy way for a user to create a `Multiaddr`."]],"mod":[["bandwidth",""],["core","Transport, protocol upgrade and swarm systems of libp2p."],["deflate",""],["dns","libp2p-dns"],["floodsub","Implements the floodsub protocol, see also the: spec."],["identify","Implementation of the `/ipfs/id/1.0.0` protocol. Allows a node A to query another node B which information B knows about A. Also includes the addresses B is listening on."],["identity","A node's network identity keys."],["kad","Implementation of the Kademlia protocol for libp2p."],["mdns","mDNS is a protocol defined by RFC 6762 that allows querying nodes that correspond to a certain domain name."],["mplex",""],["multiaddr",""],["multihash","Multihash"],["noise","[Noise protocol framework][noise] support for libp2p."],["ping","This module implements the `/ipfs/ping/1.0.0` protocol."],["plaintext",""],["ratelimit",""],["secio","The `secio` protocol is a middleware that will encrypt and decrypt communications going through a socket (or anything that implements `AsyncRead + AsyncWrite`)."],["simple",""],["tcp","Implementation of the libp2p `Transport` trait for TCP/IP."],["uds","Implementation of the libp2p `Transport` trait for Unix domain sockets."],["wasm_ext","Implementation of the libp2p `Transport` trait for external transports."],["websocket","Implementation of the libp2p `Transport` trait for Websockets."],["yamux","Implements the Yamux multiplexing protocol for libp2p, see also the specification."]],"struct":[["Multiaddr","Representation of a Multiaddr."],["PeerId","Identifier of a peer of the network."]],"trait":[["InboundUpgrade","Possible upgrade on an inbound connection or substream."],["InboundUpgradeExt","Extension trait for `InboundUpgrade`. Automatically implemented on all types that implement `InboundUpgrade`."],["OutboundUpgrade","Possible upgrade on an outbound connection or substream."],["OutboundUpgradeExt","Extention trait for `OutboundUpgrade`. Automatically implemented on all types that implement `OutboundUpgrade`."],["Transport","A transport provides connection-oriented communication between two peers through ordered streams of data (i.e. connections)."],["TransportExt","Trait automatically implemented on all objects that implement `Transport`. Provides some additional utilities."]],"type":[["Swarm","Contains the state of the network, plus the way it should behave."]]});
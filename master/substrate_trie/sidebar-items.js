initSidebarItems({"enum":[["Error","Error for trie node decoding."]],"fn":[["child_delta_trie_root","Determine a child trie root given a hash DB and delta values. H is the default hasher, but a generic implementation may ignore this type parameter and use other hashers."],["child_trie_root","Determine a child trie root given its ordered contents, closed form. H is the default hasher, but a generic implementation may ignore this type parameter and use other hashers."],["default_child_trie_root","Determine the default child trie root."],["delta_trie_root","Determine a trie root given a hash DB and delta values."],["for_keys_in_child_trie","Call `f` for all keys in a child trie."],["is_child_trie_key_valid","Determine whether a child trie key is valid."],["prefixed_key","Derive a database key from hash value of the node (key) and  the node prefix."],["read_child_trie_value","Read a value from the child trie."],["read_child_trie_value_with","Read a value from the child trie with given query."],["read_trie_value","Read a value from the trie."],["read_trie_value_with","Read a value from the trie with given Query."],["record_all_keys","Record all keys for a given root."]],"mod":[["nibble_ops","Utility methods to work on radix 16 nibble."],["trie_types","This module is for non generic definition of trie type. Only the `Hasher` trait is generic in this case."]],"static":[["EMPTY_PREFIX","An empty prefix constant. Can be use when the prefix is not use internally or for root nodes."]],"struct":[["Layout","substrate trie layout"],["NodeCodec","Concrete implementation of a `NodeCodec` with Parity Codec encoding, generic over the `Hasher`"],["Recorder","Records trie nodes as they pass it."],["TrieStream","Codec-flavored TrieStream."]],"trait":[["AsHashDB","Reexport from `hash_db`, with genericity set for `Hasher` trait."],["HashDBT","Trait modelling datastore keyed by a hash defined by the `Hasher`."],["KeyFunction",""],["Query","Description of what kind of query will be made to the trie."],["Trie","A key-value datastore implemented as a database-backed modified Merkle tree."],["TrieConfiguration","This traits associates a trie definition with prefered methods. It also contains own default implementations and can be use to allow switching implementation."],["TrieLayout","Trait with definition of trie layout. Contains all associated trait needed for a trie definition or implementation."],["TrieMut","A key-value datastore implemented as a database-backed modified Merkle tree."]],"type":[["CError","Alias accessor to `NodeCodec` associated `Error` type from a `TrieLayout`."],["DBValue",""],["GenericMemoryDB","Reexport from `hash_db`, with genericity set for `Hasher` trait."],["HashDB","Reexport from `hash_db`, with genericity set for `Hasher` trait."],["Lookup","Querying interface, as in `trie_db` but less generic."],["MemoryDB","Reexport from `hash_db`, with genericity set for `Hasher` trait. This uses the `KeyFunction` for prefixing keys internally (avoiding This uses a noops `KeyFunction` (key addressing must be hashed or using an encoding scheme that avoid key conflict)."],["PlainDB","Reexport from `hash_db`, with genericity set for key only."],["PrefixedMemoryDB","Reexport from `hash_db`, with genericity set for `Hasher` trait. This uses a `KeyFunction` for prefixing keys internally (avoiding key conflict for non random keys)."],["TrieDB","Persistent trie database read-access interface for the a given hasher."],["TrieDBMut","Persistent trie database write-access interface for the a given hasher."],["TrieError","TrieDB error over `TrieConfiguration` trait."],["TrieHash","Hash type for a trie layout."]]});
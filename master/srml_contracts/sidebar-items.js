initSidebarItems({"enum":[["Call","Contracts module."],["ContractInfo","Information for managing an acocunt and its sub trie abstraction. This is the required info to cache for an account"],["RawEvent","Events for this module."]],"macro":[["convert_args",""],["define_func",""],["gen_signature",""],["gen_signature_dispatch",""],["match_tokens","A simple utility macro that helps to match against a list of tokens."],["register_func",""],["unmarshall_then_body_then_marshall",""]],"struct":[["AccountCounter","The subtrie counter."],["AccountCounterDefaultDelegator",""],["CodeStorage","A mapping between an original code hash and instrumented wasm code, ready for execution."],["CodeStorageDefaultDelegator",""],["Config","In-memory cache of configuration values."],["ContractInfoOf","The code associated with a given account."],["ContractInfoOfDefaultDelegator",""],["DefaultBlockGasLimit","A resonable default value for [`Trait::BlockGasLimit`]."],["DefaultCallBaseFee","A resonable default value for [`Trait::CallBaseFee`]."],["DefaultContractFee","A resonable default value for [`Trait::ContractFee`]."],["DefaultCreateBaseFee","A resonable default value for [`Trait::CreateBaseFee`]."],["DefaultCreationFee","A resonable default value for [`Trait::CreationFee`]."],["DefaultDispatchFeeComputor","The default dispatch fee computor computes the fee in the same way that the implementation of `TakeFees` for the Balances module does. Note that this only takes a fixed fee based on size. Unlike the balances module, weight-fee is applied."],["DefaultMaxDepth","A resonable default value for [`Trait::MaxDepth`]."],["DefaultMaxValueSize","A resonable default value for [`Trait::MaxValueSize`]."],["DefaultRentByteFee","A resonable default value for [`Trait::RentByteFee`]."],["DefaultRentDepositOffset","A resonable default value for [`Trait::RentDepositOffset`]."],["DefaultSignedClaimHandicap","A resonable default value for [`Trait::SignedClaimedHandicap`]."],["DefaultStorageSizeOffset","A resonable default value for [`Trait::StorageSizeOffset`]."],["DefaultSurchargeReward","A resonable default value for [`Trait::SurchargeReward`]."],["DefaultTombstoneDeposit","A resonable default value for [`Trait::TombstoneDeposit`]."],["DefaultTransactionBaseFee","A resonable default value for [`Trait::TransactionBaseFee`]."],["DefaultTransactionByteFee","A resonable default value for [`Trait::TransactionByteFee`]."],["DefaultTransferFee","A resonable default value for [`Trait::TransferFee`]."],["GasMeter",""],["GenesisConfig",""],["Module",""],["PristineCode","A mapping from an original code hash to the original code, untouched by instrumentation."],["PristineCodeDefaultDelegator",""],["RawAliveContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account."],["RawTombstoneContractInfo",""],["Schedule","Definition of the cost schedule and other parameterizations for wasm vm."],["SimpleAddressDeterminator","Simple contract address determiner."],["TrieIdFromParentCounter","Get trie id from `account_id`."]],"trait":[["ComputeDispatchFee","A function that returns the fee for dispatching a `Call`."],["ContractAddressFor","A function that generates an `AccountId` for a contract upon instantiation."],["Trait",""],["TrieIdGenerator","Get a trie id (trie id must be unique and collision resistant depending upon its context). Note that it is different than encode because trie id should be collision resistant (being a proper unique identifier)."]],"type":[["AliveContractInfo",""],["BalanceOf",""],["CodeHash",""],["Event","[`RawEvent`] specialized for the configuration [`Trait`]"],["Gas",""],["NegativeImbalanceOf",""],["TombstoneContractInfo",""],["TrieId",""]]});
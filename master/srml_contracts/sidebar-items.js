initSidebarItems({"constant":[["DEFAULT_BLOCK_GAS_LIMIT",""],["DEFAULT_CALL_BASE_FEE",""],["DEFAULT_CONTRACT_FEE",""],["DEFAULT_CREATE_BASE_FEE",""],["DEFAULT_CREATION_FEE",""],["DEFAULT_MAX_DEPTH",""],["DEFAULT_RENT_BYTE_FEE",""],["DEFAULT_RENT_DEPOSIT_OFFSET",""],["DEFAULT_SIGNED_CLAIM_HANDICAP",""],["DEFAULT_STORAGE_SIZE_OFFSET",""],["DEFAULT_SURCHARGE_REWARD",""],["DEFAULT_TOMBSTONE_DEPOSIT",""],["DEFAULT_TRANSACTION_BASE_FEE",""],["DEFAULT_TRANSACTION_BYTE_FEE",""],["DEFAULT_TRANSFER_FEE",""]],"enum":[["Call","Contracts module."],["ContractInfo","Information for managing an acocunt and its sub trie abstraction. This is the required info to cache for an account"],["RawEvent","Events for this module."]],"macro":[["convert_args",""],["define_func",""],["gen_signature",""],["gen_signature_dispatch",""],["match_tokens","A simple utility macro that helps to match against a list of tokens."],["register_func",""],["unmarshall_then_body_then_marshall",""]],"struct":[["AccountCounter","The subtrie counter."],["CodeStorage","A mapping between an original code hash and instrumented wasm code, ready for execution."],["Config","In-memory cache of configuration values."],["ContractInfoOf","The code associated with a given account."],["DefaultDispatchFeeComputor","The default dispatch fee computor computes the fee in the same way that the implementation of `MakePayment` for the Balances module does."],["GenesisConfig",""],["Module",""],["PristineCode","A mapping from an original code hash to the original code, untouched by instrumentation."],["RawAliveContractInfo","Information for managing an account and its sub trie abstraction. This is the required info to cache for an account."],["RawTombstoneContractInfo",""],["Schedule","Definition of the cost schedule and other parameterizations for wasm vm."],["SimpleAddressDeterminator","Simple contract address determiner."],["TrieIdFromParentCounter","Get trie id from `account_id`."]],"trait":[["ComputeDispatchFee","A function that returns the fee for dispatching a `Call`."],["ContractAddressFor","A function that generates an `AccountId` for a contract upon instantiation."],["Trait",""],["TrieIdGenerator","Get a trie id (trie id must be unique and collision resistant depending upon its context). Note that it is different than encode because trie id should be collision resistant (being a proper unique identifier)."]],"type":[["AliveContractInfo",""],["BalanceOf",""],["CodeHash",""],["Event","[`RawEvent`] specialized for the configuration [`Trait`]"],["Gas",""],["NegativeImbalanceOf",""],["TombstoneContractInfo",""],["TrieId",""]]});
initSidebarItems({"derive":[["Deserialize",""],["Serialize",""]],"enum":[["ApplyError","Reason why an extrinsic couldn't be applied (i.e. invalid extrinsic)."],["DigestItem","Digest item that is able to encode/decode 'system' digest items and provide opaque access to other items."],["MultiSignature","Signature verify that can work with any known signature types.."],["MultiSigner","Public key for any known crypto algorithm."]],"fn":[["print","Print something that implements `Printable` from the runtime."],["verify_encoded_lazy","Verify a signature on an encoded value in a lazy manner. This can be an optimization if the signature scheme has an \"unsigned\" escape hash."]],"macro":[["__impl_outer_config_types","Helper macro for `impl_outer_config`"],["count","Calls a given macro a number of times with a set of fixed params and an incrementing numeral. e.g. `nocompile count!(println (\"{}\",) foo, bar, baz); // Will result in three `println!`s: \"0\", \"1\" and \"2\". `"],["create_runtime_str","Create a const [RuntimeString]."],["impl_opaque_keys","Implement `OpaqueKeys` for a described struct. Would be much nicer for this to be converted to `derive` code."],["impl_outer_config","Implement the output \"meta\" module configuration struct, which is basically: pub struct GenesisConfig { \trust_module_one: Option, \t... }"]],"mod":[["curve","Provides some utilities to define a piecewise linear function."],["generic","Generic implementations of Extrinsic/Header/Block."],["key_types","Re-export this since it's part of the API of this crate. Known key types; this also functions as a global registry of key types for projects wishing to avoid collisions with each other."],["testing","Testing utilities."],["traits","Primitives for the runtime modules."],["transaction_validity","Transaction validity interface."],["weights","Primitives for transaction weighting."]],"struct":[["AnySignature","Signature verify that can work with any known signature types.."],["Digest","Generic header digest."],["DispatchError","Reason why a dispatch call failed"],["Fixed64","A fixed point number by the scale of 1 billion."],["KeyTypeId","Re-export this since it's part of the API of this crate. An identifier for a type of cryptographic key."],["ModuleId","A module identifier. These are per module and should be stored in a registry somewhere."],["OpaqueExtrinsic","Simple blob to hold an extrinsic without committing to its format and ensure it is serialized correctly."],["PerU128","PerU128 is parts-per-u128-max-value. It stores a value between 0 and 1 in fixed point."],["Perbill","Perbill is parts-per-billion. It stores a value between 0 and 1 in fixed point and provides a means to multiply some other value by that."],["Permill","Permill is parts-per-million (i.e. after multiplying by this, divide by 1000000)."]],"trait":[["BuildModuleGenesisStorage","Something that can build the genesis storage of a module."],["BuildStorage","Complex storage builder stuff."],["CryptoType","Re-export this since it's part of the API of this crate. Type which has a particular kind of crypto associated with it."],["Deserialize","A data structure that can be deserialized from any data format supported by Serde."],["DeserializeOwned","A data structure that can be deserialized without borrowing any data from the deserializer."],["RuntimeAppPublic","A runtime interface for an application's public key."],["Serialize","A data structure that can be serialized into any data format supported by Serde."]],"type":[["ApplyOutcome","The outcome of applying a transaction."],["ApplyResult","Result from attempt to apply an extrinsic."],["ChildrenStorageOverlay","A set of key value pairs for children storage;"],["ConsensusEngineId","Consensus engine unique ID."],["Justification","Justification type."],["RuntimeString","A String that is a `&'static str` on `no_std` and a `Cow<'static, str>` on `std`."],["StorageOverlay","A set of key value pairs for storage."]]});